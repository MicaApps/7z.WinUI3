// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#include "winrt/ZipShellExt.h"
namespace winrt::ZipShellExt::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES BaseExplorerCommand_base : implements<D, ZipShellExt::BaseExplorerCommand, composable, I...>
    {
        using base_type = BaseExplorerCommand_base;
        using class_type = ZipShellExt::BaseExplorerCommand;
        using implements_type = typename BaseExplorerCommand_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"ZipShellExt.BaseExplorerCommand";
        }
    };
}
namespace winrt::ZipShellExt::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES BaseExplorerCommandT : implements<D, winrt::Windows::Foundation::IActivationFactory, winrt::ZipShellExt::IBaseExplorerCommandFactory, I...>
    {
        using instance_type = ZipShellExt::BaseExplorerCommand;

        hstring GetRuntimeClassName() const
        {
            return L"ZipShellExt.BaseExplorerCommand";
        }
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface)
        {
            return impl::composable_factory<T>::template CreateInstance<winrt::ZipShellExt::BaseExplorerCommand>(baseInterface, innerInterface);
        }
        [[noreturn]] winrt::Windows::Foundation::IInspectable ActivateInstance() const
        {
            throw hresult_not_implemented();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_BASEEXPLORERCOMMAND_XAML_G_H) || __has_include("BaseExplorerCommand.xaml.g.h")

#include "BaseExplorerCommand.xaml.g.h"

#else

namespace winrt::ZipShellExt::implementation
{
    template <typename D, typename... I>
    using BaseExplorerCommandT = BaseExplorerCommand_base<D, I...>;
}

#endif
