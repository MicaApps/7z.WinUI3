// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#include "winrt/ZipShellExt.h"
namespace winrt::ZipShellExt::implementation
{
    template <typename D, typename B, typename... I>
    struct WINRT_IMPL_EMPTY_BASES CompressAndEmailCommand_base : implements<D, ZipShellExt::CompressAndEmailCommand, B, no_module_lock, I...>
    {
        using base_type = CompressAndEmailCommand_base;
        using class_type = ZipShellExt::CompressAndEmailCommand;
        using implements_type = typename CompressAndEmailCommand_base::implements_type;
        using implements_type::implements_type;
        using composable_base = B;
        hstring GetRuntimeClassName() const
        {
            return L"ZipShellExt.CompressAndEmailCommand";
        }
    };
}
namespace winrt::ZipShellExt::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES CompressAndEmailCommandT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = ZipShellExt::CompressAndEmailCommand;

        hstring GetRuntimeClassName() const
        {
            return L"ZipShellExt.CompressAndEmailCommand";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_COMPRESSANDEMAILCOMMAND_XAML_G_H) || __has_include("CompressAndEmailCommand.xaml.g.h")

#include "CompressAndEmailCommand.xaml.g.h"

#else

namespace winrt::ZipShellExt::implementation
{
    template <typename D, typename... I>
    using CompressAndEmailCommandT = CompressAndEmailCommand_base<D, I...>;
}

#endif
